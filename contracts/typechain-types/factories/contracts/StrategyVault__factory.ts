/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  StrategyVault,
  StrategyVaultInterface,
} from "../../contracts/StrategyVault";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "checkRebalance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rebalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060c88061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80637d7c2a1c146037578063a56c077f14603f575b600080fd5b603d6059565b005b6045605b565b604051605091906079565b60405180910390f35b565b600090565b60008115159050919050565b6073816060565b82525050565b6000602082019050608c6000830184606c565b9291505056fea2646970667358221220631960558c09526d3cd2454f757b1b30aa7c19fd736949ae37b9ee321926783664736f6c63430008110033";

type StrategyVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StrategyVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StrategyVault__factory extends ContractFactory {
  constructor(...args: StrategyVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StrategyVault> {
    return super.deploy(overrides || {}) as Promise<StrategyVault>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): StrategyVault {
    return super.attach(address) as StrategyVault;
  }
  override connect(signer: Signer): StrategyVault__factory {
    return super.connect(signer) as StrategyVault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StrategyVaultInterface {
    return new utils.Interface(_abi) as StrategyVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StrategyVault {
    return new Contract(address, _abi, signerOrProvider) as StrategyVault;
  }
}
